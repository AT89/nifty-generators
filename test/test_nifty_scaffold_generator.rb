require File.join(File.dirname(__FILE__), "test_helper.rb")

class TestNiftyScaffoldGenerator < Test::Unit::TestCase
  include NiftyGenerators::TestHelper
  
  # Some generator-related assertions:
  #   assert_generated_file(name, &block) # block passed the file contents
  #   assert_directory_exists(name)
  #   assert_generated_class(name, &block)
  #   assert_generated_module(name, &block)
  #   assert_generated_test_for(name, &block)
  # The assert_generated_(class|module|test_for) &block is passed the body of the class/module within the file
  #   assert_has_method(body, *methods) # check that the body has a list of methods (methods with parentheses not supported yet)
  #
  # Other helper methods are:
  #   app_root_files - put this in teardown to show files generated by the test method (e.g. p app_root_files)
  #   bare_setup - place this in setup method to create the APP_ROOT folder for each test
  #   bare_teardown - place this in teardown method to destroy the TMP_ROOT or APP_ROOT folder after each test
  context "generator without name" do
    should "raise usage error" do
      assert_raise Rails::Generator::UsageError do
        run_rails_generator :nifty_scaffold
      end
    end
  end
  
  context "generator with no options" do
    rails_generator :nifty_scaffold, "line_item"
    
    should "generate model with class as camelcase name" do
      assert_generated_file "app/models/line_item.rb" do |contents|
        assert_match "class LineItem < ActiveRecord::Base", contents
      end
    end
    
    should "generate migration with default name column" do
      file = Dir.glob("#{RAILS_ROOT}/db/migrate/*.rb").first
      assert file, "migration file doesn't exist"
      assert_match(/[0-9]+_create_line_items.rb$/, file)
      assert_generated_file "db/migrate/#{File.basename(file)}" do |contents|
        assert_match "class CreateLineItems", contents
        assert_match "t.string :name", contents
        assert_match "t.timestamp", contents
      end
    end
    
    should "generate controller with class as camelcase name pluralized and all actions" do
      assert_generated_file "app/controllers/line_items_controller.rb" do |contents|
        assert_match "class LineItemsController < ApplicationController", contents
        %w[index show new create edit update destroy].each do |action|
          assert_match "def #{action}", contents
        end
      end
    end
    
    %w[index show new edit].each do |action|
      should_generate_file "app/views/line_items/#{action}.html.erb"
    end
    
    should "have name attribute" do
      assert_generated_file "app/views/line_items/_form.html.erb" do |contents|
        assert_match "<%= f.text_field :name %>", contents
      end
    end
  end
  
  context "generator with index action" do
    rails_generator :nifty_scaffold, "line_item", "index"
    
    should_generate_file "app/views/line_items/index.html.erb"
    
    should "generate controller with index action" do
      assert_generated_file "app/controllers/line_items_controller.rb" do |contents|
        assert_match "def index", contents
        assert_match "@line_items = LineItem.find(:all)", contents
        assert_no_match(/    def index/, contents)
      end
    end
  end
  
  context "generator with show action" do
    rails_generator :nifty_scaffold, "line_item", "show"
    
    should_generate_file "app/views/line_items/show.html.erb"
    
    should "generate controller with show action" do
      assert_generated_file "app/controllers/line_items_controller.rb" do |contents|
        assert_match "def show", contents
        assert_match "@line_item = LineItem.find(params[:id])", contents
      end
    end
  end
  
  context "generator with new and create actions" do
    rails_generator :nifty_scaffold, "line_item", "new", "create"
    
    should_not_generate_file "app/views/line_items/create.html.erb"
    should_not_generate_file "app/views/line_items/_form.html.erb"
    
    should "render form in 'new' template" do
      assert_generated_file "app/views/line_items/new.html.erb" do |contents|
        assert_match "<% form_for @line_item do |f| %>", contents
      end
    end
    
    should "generate controller with actions" do
      assert_generated_file "app/controllers/line_items_controller.rb" do |contents|
        assert_match "def new", contents
        assert_match "@line_item = LineItem.new\n", contents
        assert_match "def create", contents
        assert_match "@line_item = LineItem.new(params[:line_item])", contents
        assert_match "if @line_item.save", contents
        assert_match "redirect_to line_items_path", contents
        assert_match "render :action => 'new'", contents
      end
    end
  end
  
  context "generator with edit and update actions" do
    rails_generator :nifty_scaffold, "line_item", "edit", "update"
    
    should_not_generate_file "app/views/line_items/update.html.erb"
    should_not_generate_file "app/views/line_items/_form.html.erb"
    
    should "render form in 'edit' template" do
      assert_generated_file "app/views/line_items/edit.html.erb" do |contents|
        assert_match "<% form_for @line_item do |f| %>", contents
      end
    end
    
    should "generate controller with actions" do
      assert_generated_file "app/controllers/line_items_controller.rb" do |contents|
        assert_match "def edit", contents
        assert_match "@line_item = LineItem.find(params[:id])", contents
        assert_match "def update", contents
        assert_match "if @line_item.update_attributes(params[:line_item])", contents
        assert_match "redirect_to line_items_path", contents
        assert_match "render :action => 'edit'", contents
      end
    end
  end
  
  context "generator with edit and update actions" do
    rails_generator :nifty_scaffold, "line_item", "destroy"
    
    should_not_generate_file "app/views/line_items/destroy.html.erb"
    
    should "generate controller with action" do
      assert_generated_file "app/controllers/line_items_controller.rb" do |contents|
        assert_match "def destroy", contents
        assert_match "@line_item = LineItem.find(params[:id])", contents
        assert_match "@line_item.destroy", contents
        assert_match "redirect_to line_items_path", contents
      end
    end
  end
  
  context "generator with new and edit actions" do
    rails_generator :nifty_scaffold, "line_item", "new", "edit"
    
    should_generate_file "app/views/line_items/_form.html.erb"
    
    should "render the form partial in views" do
      %w[new edit].each do |action|
        assert_generated_file "app/views/line_items/#{action}.html.erb" do |contents|
          assert_match "<%= render :partial => 'form' %>", contents
        end
      end
    end
  end
  
  context "generator with attributes and actions" do
    rails_generator :nifty_scaffold, "line_item", "name:string", "new", "price:float", "index", "available:boolean"
    
    should "render a form field for each attribute in 'new' template" do
      assert_generated_file "app/views/line_items/new.html.erb" do |contents|
        assert_match "<%= f.text_field :name %>", contents
        assert_match "<%= f.text_field :price %>", contents
        assert_match "<%= f.check_box :available %>", contents
      end
    end
  end
  
  context "generator with show, create, and update actions" do
    rails_generator :nifty_scaffold, "line_item", "show", "create", "update"
    
    should "redirect to line item show page, not index" do
      assert_generated_file "app/controllers/line_items_controller.rb" do |contents|
        assert_match "redirect_to @line_item", contents
        assert_no_match(/redirect_to line_items_path/, contents)
      end
    end
  end
  
  context "existing model" do
    setup do
      Dir.mkdir("#{RAILS_ROOT}/app") unless File.exists?("#{RAILS_ROOT}/app")
      Dir.mkdir("#{RAILS_ROOT}/app/models") unless File.exists?("#{RAILS_ROOT}/app/models")
      File.open("#{RAILS_ROOT}/app/models/recipe.rb", 'w') do |f|
        f.puts "raise 'should not be loaded'"
      end
    end
    
    teardown do
      FileUtils.rm_rf "#{RAILS_ROOT}/app"
    end
    
    context "generator with no options" do
      rails_generator :nifty_scaffold, "recipe"
    
      should "use model columns for attributes" do
        assert_generated_file "app/views/recipes/_form.html.erb" do |contents|
          assert_match "<%= f.text_field :foo %>", contents
          assert_match "<%= f.text_field :bar %>", contents
        end
      end
    end
    
    context "generator with attribute specified" do
      rails_generator :nifty_scaffold, "recipe", "zippo:string"
    
      should "use specified attribute" do
        assert_generated_file "app/views/recipes/_form.html.erb" do |contents|
          assert_match "<%= f.text_field :zippo %>", contents
        end
      end
    end
  end
end

# just an example model we can use
class Recipe < ActiveRecord::Base
  add_column :foo, :string
  add_column :bar, :string
end
